# ─────────────────────────────────────────────────────────────────────
# Start from Official Jenkins LTS Image
# ─────────────────────────────────────────────────────────────────────
FROM jenkins/jenkins:lts

USER root

# ─────────────────────────────────────────────────────────────────────
# Install essential packages in one clean layer
# ─────────────────────────────────────────────────────────────────────
RUN apt-get update && apt-get install -y --no-install-recommends \
    unzip \
    zip \
    curl \
    gnupg2 \
    lsb-release \
    apt-transport-https \
    software-properties-common \
    git \
    sudo \
    docker.io \
    ca-certificates \
    groff \
    jq \
    python3 \
    wget \
    && rm -rf /var/lib/apt/lists/*

# ─────────────────────────────────────────────────────────────────────
# Preinstall basic plugins
# ─────────────────────────────────────────────────────────────────────
RUN jenkins-plugin-cli --plugins \
    configuration-as-code \
    ldap \
    role-strategy

#Install aws-cli 
RUN curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip" && \
    unzip /tmp/awscliv2.zip -d /tmp && \
    /tmp/aws/install && \
    rm -rf /tmp/aws /tmp/awscliv2.zip

# ─────────────────────────────────────────────────────────────────────
# Install Terraform (pinned)
# ─────────────────────────────────────────────────────────────────────
ARG TF_VERSION=1.7.7
ENV TF_IN_AUTOMATION=1
RUN set -eux; \
    arch="$(dpkg --print-architecture)"; \
    case "$arch" in \
      amd64) tf_arch=linux_amd64 ;; \
      arm64) tf_arch=linux_arm64 ;; \
      *) echo "Unsupported architecture: $arch" >&2; exit 1 ;; \
    esac; \
    curl -fsSLo /tmp/terraform.zip "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_${tf_arch}.zip"; \
    unzip -o /tmp/terraform.zip -d /usr/local/bin; \
    chmod +x /usr/local/bin/terraform; \
    rm -f /tmp/terraform.zip; \
    terraform -version    

# Copy Groovy admin setup script
COPY security.groovy /usr/share/jenkins/ref/init.groovy.d/security.groovy

# Copy plugins.txt if you want more plugins to preinstall
COPY plugins.txt /usr/share/jenkins/ref/plugins.txt
RUN jenkins-plugin-cli --plugin-file /usr/share/jenkins/ref/plugins.txt

# ─────────────────────────────────────────────────────────────────────
# Setup Java (Already comes in Jenkins image, just set ENV cleanly)
# ─────────────────────────────────────────────────────────────────────
ENV JAVA_HOME=/opt/java/openjdk
ENV PATH=$JAVA_HOME/bin:$PATH

# ─────────────────────────────────────────────────────────────────────
# Install Maven
# ─────────────────────────────────────────────────────────────────────
COPY binaries/apache-maven-3.9.9-bin.tar.gz /tmp/
RUN tar -xzf /tmp/apache-maven-3.9.9-bin.tar.gz -C /opt && \
    ln -s /opt/apache-maven-3.9.9 /opt/maven && \
    rm /tmp/apache-maven-3.9.9-bin.tar.gz

ENV MAVEN_HOME=/opt/maven
ENV PATH=$MAVEN_HOME/bin:$PATH

# ─────────────────────────────────────────────────────────────────────
# Install Gradle
# ─────────────────────────────────────────────────────────────────────
COPY binaries/gradle.zip /tmp/
RUN unzip -o /tmp/gradle.zip -d /opt/gradle && \
    rm /tmp/gradle.zip

ENV GRADLE_HOME=/opt/gradle/gradle-8.14
ENV PATH=$GRADLE_HOME/bin:$PATH

# ─────────────────────────────────────────────────────────────────────
# Install Docker CLI manually
# ─────────────────────────────────────────────────────────────────────
RUN curl -fsSL https://download.docker.com/linux/static/stable/x86_64/docker-27.4.0.tgz | \
    tar -xz --strip-components=1 -C /usr/bin docker/docker

# ─────────────────────────────────────────────────────────────────────
# Install Helm
# ─────────────────────────────────────────────────────────────────────
COPY binaries/linux-amd64/helm /usr/bin/helm
RUN chmod +x /usr/bin/helm

# ─────────────────────────────────────────────────────────────────────
# Install kubectl
# ─────────────────────────────────────────────────────────────────────
COPY binaries/kubectl /usr/local/bin/kubectl
RUN chmod +x /usr/local/bin/kubectl

# ─────────────────────────────────────────────────────────────────────
# Install conftest
# ─────────────────────────────────────────────────────────────────────
COPY binaries/conftest_0.60.0_Linux_x86_64.tar.gz /tmp/
RUN tar -xzf /tmp/conftest_0.60.0_Linux_x86_64.tar.gz -C /tmp && \
    mv /tmp/conftest /usr/local/bin/conftest && \
    chmod +x /usr/local/bin/conftest && \
    rm /tmp/conftest_0.60.0_Linux_x86_64.tar.gz

# ─────────────────────────────────────────────────────────────────────
# Install SonarScanner (Dynamic latest installation)
# ─────────────────────────────────────────────────────────────────────
# ARG SONAR_SCANNER_VERSION=5.0.1.3006
# COPY binaries/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip /tmp/
# RUN unzip -o /tmp/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip -d /opt && \
#     mv /opt/sonar-scanner-${SONAR_SCANNER_VERSION}-linux /opt/sonar-scanner && \
#     ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner && \
#     rm /tmp/sonar-scanner-cli-${SONAR_SCANNER_VERSION}-linux.zip && \
#     sed -i 's/use_embedded_jre=true/use_embedded_jre=false/' /opt/sonar-scanner/bin/sonar-scanner

# ENV SONAR_SCANNER_HOME=/opt/sonar-scanner
# ENV PATH=$SONAR_SCANNER_HOME/bin:$PATH

# Force sonar-scanner to use system Java
#RUN rm -rf /opt/sonar-scanner/jre || true
#RUN sed -i '2iexport JAVA_HOME=/opt/java/openjdk\nexport PATH=$JAVA_HOME/bin:$PATH' /opt/sonar-scanner/bin/sonar-scanner && \
#    echo "sonar.java.path=/opt/java/openjdk/bin/java" >> /opt/sonar-scanner/conf/sonar-scanner.properties

# ─────────────────────────────────────────────────────────────────────
# Install aws-iam-authenticator
# ─────────────────────────────────────────────────────────────────────
# RUN curl -Lo /usr/local/bin/aws-iam-authenticator \
#     https://amazon-eks.s3.us-west-2.amazonaws.com/1.27.6/2023-11-14/bin/linux/amd64/aws-iam-authenticator && \
#     chmod +x /usr/local/bin/aws-iam-authenticator

# ─────────────────────────────────────────────────────────────────────
# Add your SSL certs (for SonarQube SSL trust if needed)
# ─────────────────────────────────────────────────────────────────────
COPY sonar.crt /tmp/sonar.crt
RUN keytool -importcert \
    -alias sonar-relevance \
    -file /tmp/sonar.crt \
    -cacerts \
    -trustcacerts \
    -storepass changeit \
    -noprompt && \
    rm /tmp/sonar.crt

# ─────────────────────────────────────────────────────────────────────
# Install Trivy - Docker Scan ---> We are building a seperate image for Trivy hence commenting it out
# ─────────────────────────────────────────────────────────────────────
#RUN wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.62.1_Linux-64bit.deb && \
#    dpkg -i trivy_0.62.1_Linux-64bit.deb

# ─────────────────────────────────────────────────────────────────────
# Final Cleanup
# ─────────────────────────────────────────────────────────────────────
# RUN chown -R jenkins:jenkins /usr/share/jenkins/ref /opt/sonar-scanner

# ─────────────────────────────────────────────────────────────────────
# Switch back to Jenkins User
# ─────────────────────────────────────────────────────────────────────
USER jenkins
